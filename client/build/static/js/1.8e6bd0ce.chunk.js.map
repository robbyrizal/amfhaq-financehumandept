{"version":3,"sources":["../node_modules/reactstrap/es/Row.js","../node_modules/reactstrap/es/Col.js","../../src/data/OperationData.ts","../../src/data/QueryData.ts","../../src/utils/useBaseQuery.ts","../../src/utils/useDeepMemo.ts","../../src/data/MutationData.ts","../../src/data/SubscriptionData.ts","../../src/ssr/RenderPromises.ts","../../src/Query.tsx","../../src/useQuery.ts","../../src/Mutation.tsx","../../src/useMutation.ts","../../src/Subscription.tsx","../../src/useSubscription.ts","../../src/hoc-utils.tsx","../../src/graphql.tsx","../../src/mutation-hoc.tsx","../../src/subscription-hoc.tsx","../../src/query-hoc.tsx","../node_modules/reactstrap/es/Button.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"names":["rowColsPropType","PropTypes","oneOfType","number","string","propTypes","tag","tagPropType","noGutters","bool","className","cssModule","object","form","xs","sm","md","lg","xl","defaultProps","widths","Row","props","Tag","attributes","_objectWithoutPropertiesLoose","colClasses","forEach","colWidth","i","colSize","isXs","push","classes","mapToCssModules","classNames","React","createElement","_extends","stringOrNumberProp","columnProps","shape","size","order","offset","array","getColumnSizeClass","Col","columnProp","isObject","_classNames","colSizeInterfix","colClass","_colClass","length","options","context","isMounted","previousOptions","this","getOptions","setOptions","newOptions","storePrevious","isEqual","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","onNewData","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","loading","networkStatus","ready","called","data","undefined","fetchData","ssr","obs","getCurrentResult","afterExecute","lazy","handleErrorOrCompleted","bind","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","catch","subscription","obsQuery","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","currentResult","partial","errors","graphQLErrors","partialRefetch","resetQueryStoreErrors","onCompleted","onError","unsubscribe","useBaseQuery","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","Promise","resolve","then","memoFn","key","ref","value","useDeepMemo","queryResult","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","mutationContext","ignoreResults","updateResult","isMostRecentMutation","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","queryPromises","Map","queryInfoTrie","observable","lookupQueryInfo","queryInstance","finish","seen","set","hasPromises","consumeAndAwaitPromises","promises","promise","clear","all","varMap","get","has","variablesString","JSON","stringify","info","useQuery","mutationDataRef","mutationData","subscriptionDataRef","useSubscription","func","isRequired","notifyOnNetworkStatusChange","returnPartialData","arrayOf","defaultMapPropsToOptions","defaultMapPropsToSkip","getDisplayName","WrappedComponent","name","calculateVariablesFromProps","variable","variableName","variableProp","kind","withRef","setWrappedInstance","getWrappedInstance","wrappedInstance","Component","graphql","operationOptions","alias","mapPropsToOptions","graphQLDisplayName","GraphQL","render","opts","r","resultName","childProps","newResult","ownProps","withMutation","Subscription","lastResultProps","mapPropsToSkip","state","resubscribe","componentDidUpate","prevProps","setState","shouldSkip","create","withSubscription","withQuery","active","block","color","disabled","outline","innerRef","onClick","node","close","Button","_React$Component","_this","call","_assertThisInitialized","_inheritsLoose","_proto","prototype","e","preventDefault","_this$props","ariaLabel","btnOutlineColor","href","defaultAriaLabel","_taggedTemplateLiteral","strings","raw","slice","freeze","defineProperties"],"mappings":"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","file":"static/js/1.8e6bd0ce.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar rowColWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar rowColsPropType = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar propTypes = {\n  tag: tagPropType,\n  noGutters: PropTypes.bool,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  form: PropTypes.bool,\n  xs: rowColsPropType,\n  sm: rowColsPropType,\n  md: rowColsPropType,\n  lg: rowColsPropType,\n  xl: rowColsPropType\n};\nvar defaultProps = {\n  tag: 'div',\n  widths: rowColWidths\n};\n\nvar Row = function Row(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      noGutters = props.noGutters,\n      Tag = props.tag,\n      form = props.form,\n      widths = props.widths,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"noGutters\", \"tag\", \"form\", \"widths\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var colSize = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!colSize) {\n      return;\n    }\n\n    var isXs = !i;\n    colClasses.push(isXs ? \"row-cols-\" + colSize : \"row-cols-\" + colWidth + \"-\" + colSize);\n  });\n  var classes = mapToCssModules(classNames(className, noGutters ? 'no-gutters' : null, form ? 'form-row' : 'row', colClasses), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nRow.propTypes = propTypes;\nRow.defaultProps = defaultProps;\nexport default Row;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string, PropTypes.shape({\n  size: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  tag: tagPropType,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'div',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Col = function Col(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      widths = props.widths,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"widths\", \"tag\"]);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      var colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames)), cssModule));\n    } else {\n      var _colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n\n      colClasses.push(_colClass);\n    }\n  });\n\n  if (!colClasses.length) {\n    colClasses.push('col');\n  }\n\n  var classes = mapToCssModules(classNames(className, colClasses), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCol.propTypes = propTypes;\nCol.defaultProps = defaultProps;\nexport default Col;","import { ApolloClient } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: ApolloContextValue = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ApolloError,\n  NetworkStatus,\n  FetchMoreOptions,\n  FetchMoreQueryOptions,\n  UpdateQueryOptions,\n  SubscribeToMoreOptions,\n} from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields,\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable,\n  QueryTuple,\n  QueryLazyOptions,\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  public onNewData: () => void;\n\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n\n  constructor({\n    options,\n    context,\n    onNewData,\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (this.isMounted) this.startQuerySubscription();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined,\n          } as QueryResult<TData, TVariables>,\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n\n    // currentObservable.query is already assigned the registered SSR observable in initializeObservableQuery.\n    const obs = this.currentObservable.query!;\n    const currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables,\n      };\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context,\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteResult = (): QueryResult<TData, TVariables> => {\n    const result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n\n  private getExecuteSsrResult() {\n    const ssrDisabled = this.getOptions().ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    let result;\n    if (this.ssrInitiated()) {\n      result =\n        this.context.renderPromises!.addQueryPromise(\n          this,\n          this.getExecuteResult\n        ) || ssrLoading;\n    }\n\n    return result;\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n      metadata: { reactComponent: { displayName } },\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null,\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions,\n      });\n\n      if (this.ssrInitiated()) {\n        this.context?.renderPromises?.registerSSRObservable(\n          this.currentObservable.query,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null,\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previousData.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          isEqual(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        this.onNewData();\n      },\n      error: (error) => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previousData.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !isEqual(error, this.previousData.error)\n        ) {\n          this.previousData.error = error;\n          this.onNewData();\n        }\n      },\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult,\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result: any = this.observableQueryFields();\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true,\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        loading,\n        networkStatus,\n        error,\n        called: true,\n      };\n\n      if (loading) {\n        const previousData =\n          this.previousData.result && this.previousData.result.data;\n        result.data =\n          previousData && data\n            ? {\n                ...previousData,\n                ...data,\n              }\n            : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data,\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          !data &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading,\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable.query &&\n      this.currentObservable.query.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n\n    const { data, loading, error } = this.previousData.result;\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previousData.loading &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n\n  private obsRefetch = (variables?: TVariables) =>\n    this.currentObservable.query!.refetch(variables);\n\n  private obsFetchMore = <K extends keyof TVariables>(\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, K> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable.query!.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable.query!.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable &&\n      this.currentObservable.query! &&\n      this.currentObservable.query!.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable.query!.subscribeToMore(options);\n\n  private observableQueryFields() {\n    const observable = this.currentObservable.query!;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore,\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult,\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions, QueryTuple } from '../types';\nimport { QueryData } from '../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer((x) => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData =\n    queryDataRef.current ||\n    new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask.\n          Promise.resolve().then(forceUpdate);\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      },\n    });\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // SSR won't trigger the effect hook below that stores the current\n  // `QueryData` instance for future renders, so we'll handle that here if\n  // the current render is happening server side.\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: { ...updatedOptions, onError: undefined, onCompleted: undefined },\n    context,\n    tick,\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  useEffect(() => {\n    // We only need one instance of the `QueryData` class, so we'll store it\n    // as a ref to make it available on subsequent renders.\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return () => queryData.cleanup();\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n  ]);\n\n  return result;\n}\n","import { useRef } from 'react';\nimport { equal as isEqual } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !isEqual(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n","import { ApolloError } from 'apollo-client';\nimport { equal as isEqual } from '@wry/equality';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: (result: MutationResult<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: (result: MutationResult<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation = (\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) => {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  };\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.getOptions();\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries:\n        mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { equal as isEqual } from '@wry/equality';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !isEqual(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { ObservableQuery } from 'apollo-client';\nimport { QueryOptions } from '../types';\nimport { DocumentNode } from 'graphql';\nimport { QueryData } from '../data/QueryData';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.getOptions(),\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { QueryComponentOptions } from './types';\n\nexport function Query<TData = any, TVariables = OperationVariables>(\n  props: QueryComponentOptions<TData, TVariables>\n) {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return children && result ? children(result) : null;\n}\n\nexport namespace Query {\n  export const propTypes = {\n    client: PropTypes.object,\n    children: PropTypes.func.isRequired,\n    fetchPolicy: PropTypes.string,\n    notifyOnNetworkStatusChange: PropTypes.bool,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    pollInterval: PropTypes.number,\n    query: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    ssr: PropTypes.bool,\n    partialRefetch: PropTypes.bool,\n    returnPartialData: PropTypes.bool\n  };\n}\n","import { OperationVariables, QueryResult } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions } from './types';\nimport { useBaseQuery } from './utils/useBaseQuery';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n) {\n  return useBaseQuery<TData, TVariables>(query, options, false) as QueryResult<\n    TData,\n    TVariables\n  >;\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { useMutation } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { MutationComponentOptions } from './types';\n\nexport function Mutation<TData = any, TVariables = OperationVariables>(\n  props: MutationComponentOptions<TData, TVariables>\n) {\n  const [runMutation, result] = useMutation(props.mutation, props);\n  return props.children ? props.children(runMutation, result) : null;\n}\n\nexport namespace Mutation {\n  export const propTypes = {\n    mutation: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    refetchQueries: PropTypes.oneOfType([\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n      ),\n      PropTypes.func\n    ]),\n    awaitRefetchQueries: PropTypes.bool,\n    update: PropTypes.func,\n    children: PropTypes.func.isRequired,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    fetchPolicy: PropTypes.string\n  };\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { useSubscription } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { SubscriptionComponentOptions } from './types';\n\nexport function Subscription<TData = any, TVariables = OperationVariables>(\n  props: SubscriptionComponentOptions<TData, TVariables>\n) {\n  const result = useSubscription(props.subscription, props);\n  return props.children && result ? props.children(result) : null;\n}\n\nexport namespace Subscription {\n  export const propTypes = {\n    subscription: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    children: PropTypes.func,\n    onSubscriptionData: PropTypes.func,\n    onSubscriptionComplete: PropTypes.func,\n    shouldResubscribe: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  };\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\n\nimport { SubscriptionHookOptions } from './types';\nimport { SubscriptionData } from './data/SubscriptionData';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => subscriptionData.cleanup.bind(subscriptionData), []);\n\n  return subscriptionData.execute(result);\n}\n","import React from 'react';\nimport { invariant } from 'ts-invariant';\nimport { IDocumentDefinition, OperationVariables } from '@apollo/react-common';\n\nexport const defaultMapPropsToOptions = () => ({});\nexport const defaultMapResultToProps: <P>(props: P) => P = props => props;\nexport const defaultMapPropsToSkip = () => false;\n\nexport function getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function calculateVariablesFromProps<TProps>(\n  operation: IDocumentDefinition,\n  props: TProps\n) {\n  let variables: OperationVariables = {};\n  for (let { variable, type } of operation.variables) {\n    if (!variable.name || !variable.name.value) continue;\n\n    const variableName = variable.name.value;\n    const variableProp = (props as any)[variableName];\n\n    if (typeof variableProp !== 'undefined') {\n      variables[variableName] = variableProp;\n      continue;\n    }\n\n    // Allow optional props\n    if (type.kind !== 'NonNullType') {\n      variables[variableName] = undefined;\n    }\n  }\n  return variables;\n}\n\nexport type RefSetter<TChildProps> = (\n  ref: React.ComponentClass<TChildProps>\n) => void | void;\n\n// base class for hocs to easily manage refs\nexport class GraphQLBase<\n  TProps,\n  TChildProps,\n  TState = any\n  > extends React.Component<TProps, TState> {\n  public withRef: boolean = false;\n  // wrapped instance\n  private wrappedInstance?: React.ComponentClass<TChildProps>;\n\n  constructor(props: TProps) {\n    super(props);\n    this.setWrappedInstance = this.setWrappedInstance.bind(this);\n  }\n\n  getWrappedInstance() {\n    invariant(\n      this.withRef,\n      `To access the wrapped instance, you need to specify ` +\n      `{ withRef: true } in the options`\n    );\n\n    return this.wrappedInstance;\n  }\n\n  setWrappedInstance(ref: React.ComponentClass<TChildProps>) {\n    this.wrappedInstance = ref;\n  }\n}\n","import { DocumentNode } from 'graphql';\nimport { parser, DocumentType } from '@apollo/react-common';\n\nimport { withQuery } from './query-hoc';\nimport { withMutation } from './mutation-hoc';\nimport { withSubscription } from './subscription-hoc';\nimport { OperationOption, DataProps, MutateProps } from './types';\n\nexport function graphql<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = Partial<DataProps<TData, TGraphQLVariables>> &\n    Partial<MutateProps<TData, TGraphQLVariables>>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  switch (parser(document).type) {\n    case DocumentType.Mutation:\n      return withMutation(document, operationOptions);\n    case DocumentType.Subscription:\n      return withSubscription(document, operationOptions);\n    case DocumentType.Query:\n    default:\n      return withQuery(document, operationOptions);\n  }\n}\n","import React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport {\n  parser,\n  BaseMutationOptions,\n  MutationFunction,\n  MutationResult\n} from '@apollo/react-common';\nimport { Mutation } from '@apollo/react-components';\n\nimport {\n  defaultMapPropsToOptions,\n  getDisplayName,\n  calculateVariablesFromProps,\n  GraphQLBase\n} from './hoc-utils';\nimport { OperationOption, OptionProps, MutateProps } from './types';\n\nexport function withMutation<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = MutateProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n\n  const {\n    options = defaultMapPropsToOptions,\n    alias = 'Apollo'\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseMutationOptions;\n  if (typeof mapPropsToOptions !== 'function')\n    mapPropsToOptions = () => options as BaseMutationOptions;\n\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n      render() {\n        let props = this.props as TProps;\n        const opts = mapPropsToOptions(props);\n\n        if (operationOptions.withRef) {\n          this.withRef = true;\n          props = Object.assign({}, props, {\n            ref: this.setWrappedInstance\n          });\n        }\n        if (!opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return (\n          <Mutation ignoreResults {...opts} mutation={document}>\n            {(\n              mutate: MutationFunction<TData, TGraphQLVariables>,\n              { data, ...r }: MutationResult<TData>\n            ) => {\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Mutation component's shape here to replicate that\n              // this matches the query HoC\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'mutate';\n              const resultName = operationOptions.name\n                ? `${name}Result`\n                : 'result';\n              let childProps = ({\n                [name]: mutate,\n                [resultName]: result\n              } as any) as TChildProps;\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: mutate,\n                  [resultName]: result,\n                  ownProps: props\n                };\n                childProps = operationOptions.props(newResult) as any;\n              }\n\n              return <WrappedComponent {...props} {...childProps} />;\n            }}\n          </Mutation>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { parser, BaseQueryOptions } from '@apollo/react-common';\nimport { Subscription } from '@apollo/react-components';\n\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip\n} from './hoc-utils';\nimport { OperationOption, OptionProps, DataProps } from './types';\n\nexport function withSubscription<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo',\n    shouldResubscribe\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseQueryOptions;\n  if (typeof mapPropsToOptions !== 'function')\n    mapPropsToOptions = () => options as BaseQueryOptions;\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') mapPropsToSkip = () => skip as any;\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<\n      TProps,\n      TChildProps,\n      { resubscribe: boolean }\n    > {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n      constructor(props: TProps) {\n        super(props);\n        this.state = { resubscribe: false };\n      }\n\n      componentDidUpate(prevProps: TProps) {\n        if (shouldResubscribe) {\n          this.setState({\n            resubscribe: shouldResubscribe(prevProps, this.props)\n          });\n        }\n      }\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip\n          ? Object.create(null)\n          : mapPropsToOptions(props);\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n        return (\n          <Subscription\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            subscription={document}\n            shouldResubscribe={this.state.resubscribe}\n          >\n            {({ data, ...r }: any) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance\n                });\n              }\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...props as TProps}\n                    {...{} as TChildProps}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: result,\n                  ownProps: props as TProps\n                };\n                lastResultProps = operationOptions.props(\n                  newResult,\n                  lastResultProps\n                );\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...props as TProps}\n                  {...childProps as TChildProps}\n                />\n              );\n            }}\n          </Subscription>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { parser, BaseQueryOptions } from '@apollo/react-common';\nimport { Query } from '@apollo/react-components';\n\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip\n} from './hoc-utils';\nimport { OperationOption, OptionProps, DataProps } from './types';\n\nexport function withQuery<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo'\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseQueryOptions;\n  if (typeof mapPropsToOptions !== 'function') {\n    mapPropsToOptions = () => options as BaseQueryOptions;\n  }\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') {\n    mapPropsToSkip = () => skip as any;\n  }\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip\n          ? Object.create(null)\n          : { ...mapPropsToOptions(props) };\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return (\n          <Query\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            query={document}\n          >\n            {({ client: _, data, ...r }: any) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance\n                });\n              }\n\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...props as TProps}\n                    {...{} as TChildProps}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: result,\n                  ownProps: props as TProps\n                };\n                lastResultProps = operationOptions.props(\n                  newResult,\n                  lastResultProps\n                );\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...props as TProps}\n                  {...childProps as TChildProps}\n                />\n              );\n            }}\n          </Query>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  active: PropTypes.bool,\n  'aria-label': PropTypes.string,\n  block: PropTypes.bool,\n  color: PropTypes.string,\n  disabled: PropTypes.bool,\n  outline: PropTypes.bool,\n  tag: tagPropType,\n  innerRef: PropTypes.oneOfType([PropTypes.object, PropTypes.func, PropTypes.string]),\n  onClick: PropTypes.func,\n  size: PropTypes.string,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  close: PropTypes.bool\n};\nvar defaultProps = {\n  color: 'secondary',\n  tag: 'button'\n};\n\nvar Button = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Button, _React$Component);\n\n  function Button(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.onClick = _this.onClick.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Button.prototype;\n\n  _proto.onClick = function onClick(e) {\n    if (this.props.disabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (this.props.onClick) {\n      return this.props.onClick(e);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        active = _this$props.active,\n        ariaLabel = _this$props['aria-label'],\n        block = _this$props.block,\n        className = _this$props.className,\n        close = _this$props.close,\n        cssModule = _this$props.cssModule,\n        color = _this$props.color,\n        outline = _this$props.outline,\n        size = _this$props.size,\n        Tag = _this$props.tag,\n        innerRef = _this$props.innerRef,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"active\", \"aria-label\", \"block\", \"className\", \"close\", \"cssModule\", \"color\", \"outline\", \"size\", \"tag\", \"innerRef\"]);\n\n    if (close && typeof attributes.children === 'undefined') {\n      attributes.children = /*#__PURE__*/React.createElement(\"span\", {\n        \"aria-hidden\": true\n      }, \"\\xD7\");\n    }\n\n    var btnOutlineColor = \"btn\" + (outline ? '-outline' : '') + \"-\" + color;\n    var classes = mapToCssModules(classNames(className, {\n      close: close\n    }, close || 'btn', close || btnOutlineColor, size ? \"btn-\" + size : false, block ? 'btn-block' : false, {\n      active: active,\n      disabled: this.props.disabled\n    }), cssModule);\n\n    if (attributes.href && Tag === 'button') {\n      Tag = 'a';\n    }\n\n    var defaultAriaLabel = close ? 'Close' : null;\n    return /*#__PURE__*/React.createElement(Tag, _extends({\n      type: Tag === 'button' && attributes.onClick ? 'button' : undefined\n    }, attributes, {\n      className: classes,\n      ref: innerRef,\n      onClick: this.onClick,\n      \"aria-label\": ariaLabel || defaultAriaLabel\n    }));\n  };\n\n  return Button;\n}(React.Component);\n\nButton.propTypes = propTypes;\nButton.defaultProps = defaultProps;\nexport default Button;","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"sourceRoot":""}